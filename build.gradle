import java.nio.file.Files
import java.nio.file.Paths

/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/tutorial_java_projects.html
 */

String jruby_jar = "jruby-complete-9.2.14.0.jar"

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
		classpath 'org.ajoberstar:grgit:1.7.2'
	}
}


//import org.apache.tools.ant.filters.ReplaceTokens

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

// Apply the application plugin to add support for building an application
apply plugin: 'application'


// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
		mavenCentral()
}

ext {
	git = org.ajoberstar.grgit.Grgit.open(file('.'))
	describedCommit = git.describe().toString().trim()
	buildVersion = describedCommit + (describedCommit.matches(".*-[0-9]+-g[0-9a-f]{7}") ? "-SNAPSHOT" : "") + (git.status().isClean() ? "" : "+" + new Date().format("yyyyMMddHHmmss"))
}

dependencies {
    implementation 'com.sparkjava:spark-core:2.9.3'
    implementation 'com.jcraft:jsch:0.1.55'
	implementation 'org.json:json:20190722'
	implementation 'org.jruby:jruby-complete:9.2.12.0'
	implementation 'org.xerial:sqlite-jdbc:3.30.1'
	implementation 'org.slf4j:slf4j-simple:1.7.25'
	implementation 'org.slf4j:slf4j-api:1.7.25'
	implementation 'org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r'
	implementation 'com.hierynomus:sshj:0.29.0'
	implementation group: 'com.esotericsoftware', name: 'kryo', version: '5.1.1'
	implementation 'com.carrotsearch:java-sizeof:0.0.5'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.11.3'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.3'
	implementation group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'
	implementation group: 'com.github.oshi', name: 'oshi-core', version: '5.7.3'
	implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
}

// Define the main class for the application
//sourceCompatibility ='1.11'
//targetCompatibility = '1.11'
mainClassName = 'jp.tkms.waffle.Main'
applicationDefaultJvmArgs = ["--illegal-access=deny", "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED", "--add-opens=java.base/java.io=ALL-UNNAMED"]

processResources.outputs.upToDateWhen { false }

task buildServant(type: Exec) {
	executable "sh"
	args "-c", "cd sub_project/waffle-servant; ./gradlew build"
}

def copyJarFileAsResourceBin(path) {
    String resourcesDir = 'build/resources/main'
	String fileName = new String(path).replaceAll("^.*/", "")
	copy {
		from path
		into resourcesDir
	}
	file(resourcesDir + '/' + fileName).renameTo(resourcesDir + '/' + fileName + '.bin')
}

task copyFilesToResource(dependsOn: buildServant) {
	copyJarFileAsResourceBin('sub_project/waffle-servant/build/libs/waffle-servant-all.jar')
	copyJarFileAsResourceBin('sub_project/waffle-virtual-job-executor/build/libs/waffle-virtual-job-executor-all.jar')

	copy {
		from ('./') {
			include 'LICENSE.md'
		}
		into 'build/resources/main'
	}
}

task updateVersionFile {
	String versionFile = 'build/resources/main/version.txt'
	if (file(versionFile).exists()) {
		file(versionFile).delete()
	}
	if (file(versionFile).getParentFile().exists()) {
		new File(versionFile).text = "${buildVersion}"
	}
	/*
	filesMatching("version.txt") {
		filter(ReplaceTokens, tokens: ['build_version': buildVersion])
	}
	 */
	println "version -> ${buildVersion}"
}

task createXsub {
	file("build/tmp/xsub_archive/xsub/bin/" + jruby_jar).renameTo(file("build/tmp/xsub_archive/xsub/bin/jruby-complete.jar"))

	copy {
		from ('lib') {
			include jruby_jar
		}
		into 'build/tmp/xsub_archive/xsub/bin'
	}

	copy {
		from 'src/main/resources/xsub/bin'
		into 'build/tmp/xsub_archive/xsub/bin'
	}

	file("build/tmp/xsub_archive/xsub/bin").renameTo(file("build/tmp/xsub_archive/xsub/org_bin"))

	copy {
		from 'xsub'
		into 'build/tmp/xsub_archive/xsub'
	}
}

task createXsubArchive(type: Zip, dependsOn: createXsub) {
	destinationDirectory = file('build/resources/main')
	archiveFileName = 'xsub.zip'
	from 'build/tmp/xsub_archive/'
	excludes = ['.git',]
}

assemble.dependsOn(updateVersionFile, copyFilesToResource, jar, createXsubArchive)

task runJar(type: Exec, dependsOn: build) {
	executable "java"
	args "-jar", "build/libs/waffle-all.jar"
}